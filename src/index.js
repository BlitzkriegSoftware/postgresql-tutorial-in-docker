'use strict';

/**
 * index.js - Entry Point
 * @name   Index
 * @module ApplicationRoot
 */

/**
 * Constants
 */
const DEFAULT_POSTGRES = 'postgresql://postgres:password123-@localhost/salesdb';

/**
 * Includes
 */
const path = require('path');
const { exitCode } = require('node:process');
import { lookupService } from 'node:dns';
import { Client } from 'pg';

/**
 * Where is the app root folder?
 * @global
 */
global.appRoot = path.resolve(__dirname);

/**
 * handle SIGQUIT signals gracefully
 */
process.on('SIGQUIT', () => {
  const msg = 'Received SIGQUIT, performing graceful shutdown.';
  shutdown(-2, msg);
});

/**
 * Orderly shutdown
 * @function
 * @param {number}} exitcode
 * @param {string} msg
 * @returns {void}
 */
function shutdown(exitcode, msg) {
  global.continueWork = false;
  if (!Utility.isNumber(exitcode)) {
    exitCode = 0;
  }
  if (!Utility.isBlank(msg)) {
    console.log(JSON.stringify(msg));
  }

  process.exit(exitcode);
}

/**
 * Message callback prototype
 * @function
 * @param {*} message
 * @returns {void}
 */
function messageCallback(message) {}

/*
 * SQL Functions
 */

//
// lookups
//

/**
 * List of employees who are sales people
 * @param {*} client
 * @returns result -- rows of employee, region ids
 */
async function getSalesPeople(client) {
  const sql =
    'select employee_id, region_id from public.employees where (is_deleted = false) and (employee_roles_id = 1);';
  const result = await client.query(sql);
  return result;
}

/**
 * List of Customers
 * @param {*} client
 * @returns result -- rows of customer ids
 */
async function getCompanies(client) {
  const sql =
    'select company_id from public.companies where (is_deleted = false)';
  const result = await client.query(sql);
  return result;
}

/**
 * Get list of incentive id (not 1 is always none)
 * @param {*} client
 * @returns result - rows of incentive ids
 */
async function getIncentives(client) {
  const sql =
    'select incentive_id from public.incentives where (is_deleted = false)';
  const result = await client.query(sql);
  return result;
}

/**
 * Get list of product ids
 * @param {*} client
 * @returns result - rows of products
 */
async function getProducts(client) {
  const sql =
    'select products_id from public.products where (is_deleted = false)';
  const result = await client.query(sql);
  return result;
}

//
// Randomizers
//

/**
 * Random number between min,max inclusive
 * Generated by AI
 * @param {number} min
 * @param {number} max
 * @returns {number} - between inclusive
 */
function getRandomNumber(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 * Given a PG Result, return a random rows, indexColumn value
 * @param {*} result - PG.RESULT
 * @param {number} indexColumn - Column to use (default 0)
 * @returns {*} - Value
 */
function getRandomResult(result, indexColumn = 0) {
  const max = result.rowCount;
  const index = getRandomNumber(0, max - 1);
  let value = result.rows[index][indexColumn];
  return value;
}

/**
 * Get Incentive
 * @param {*} incentives  - PG.RESULT
 * @returns {number} - incentive_id (strong bias to 1 (none))
 */
function getIncentive(incentives) {
  const NONE = 1;
  const ODDS = 901;
  let incentive_id = NONE;
  if (getRandomNumber(1, 1000) > ODDS) {
    let incentive_id = getRandomResult(incentives, 0);
  }
  return incentive_id;
}

//
// Inserters
//

/**
 * Main() Async Entry Point
 */
async function main() {
  /**
   * Argument parsing
   */
  const yargs = require('yargs');

  // Command line args
  const commandlineargs = yargs
    .option('c', {
      alias: 'connection',
      describe: 'connection string',
      demandOption: false,
      default: DEFAULT_POSTGRES
    })
    .option('n', {
      alias: 'number',
      describe: 'How many sales to make',
      type: 'number',
      demandOption: false,
      default: 100
    })
    .option('y', {
      alias: 'year',
      describe: 'For what year',
      type: 'number',
      demandOption: false,
      default: 2024
    }).argv;

  // see: https://node-postgres.com/apis/client#new-client
  const postgres_config = {
    connectionString: commandlineargs.connection
  };

  let client = new Client(postgres_config);

  try {
    await client.connect();

    // Lookups
    const products = await getProducts(client);
    const incentives = await getIncentives(client);
    const companies = await getCompanies(client);
    const sales = await getSalesPeople(client);
  } catch (e) {
    console.log(e);
  } finally {
    await client.end();
    client = null;
  }
}

/**
 * ENTRY POINT
 */
main();
shutdown(0, 'Normal Exit');
