'use strict';

/**
 * index.js - Entry Point
 * @name   Index
 * @module ApplicationRoot
 */

/**
 * Constants
 */
const DEFAULT_POSTGRES = 'postgresql://postgres:password123-@localhost/salesdb';

/**
 * Includes
 */
const path = require('path');
const { exitCode } = require('node:process');
import { lookupService } from 'node:dns';
import { Client } from 'pg';

/**
 * Where is the app root folder?
 * @global
 */
global.appRoot = path.resolve(__dirname);

/**
 * handle SIGQUIT signals gracefully
 */
process.on('SIGQUIT', () => {
  const msg = 'Received SIGQUIT, performing graceful shutdown.';
  shutdown(-2, msg);
});

/**
 * Orderly shutdown
 * @function
 * @param {number}} exitcode
 * @param {string} msg
 * @returns {void}
 */
function shutdown(exitcode, msg) {
  global.continueWork = false;
  if (!Utility.isNumber(exitcode)) {
    exitCode = 0;
  }
  if (!Utility.isBlank(msg)) {
    console.log(JSON.stringify(msg));
  }

  process.exit(exitcode);
}

/**
 * Message callback prototype
 * @function
 * @param {*} message
 * @returns {void}
 */
function messageCallback(message) {}

/*
 * SQL Functions
 */

//
// lookups
//

/**
 * List of employees who are sales people
 * @param {*} client - PG Client
 * @returns result -- rows of employee, region ids
 */
async function getSalesPeople(client) {
  const sql =
    'select employee_id, region_id from public.employees where (is_deleted = false) and (employee_roles_id = 1);';
  const result = await client.query(sql);
  return result;
}

/**
 * List of Customers
 * @param {*} client - PG Client
 * @returns result -- rows of customer ids
 */
async function getCompanies(client) {
  const sql =
    'select company_id from public.companies where (is_deleted = false)';
  const result = await client.query(sql);
  return result;
}

/**
 * Get list of incentive id (not 1 is always none)
 * @param {*} client - PG Client
 * @returns result - rows of incentive ids
 */
async function getIncentives(client) {
  const sql =
    'select incentive_id from public.incentives where (is_deleted = false)';
  const result = await client.query(sql);
  return result;
}

/**
 * Get list of product ids
 * @param {*} client - PG Client
 * @returns result - rows of products
 */
async function getProducts(client) {
  const sql =
    'select products_id from public.products where (is_deleted = false)';
  const result = await client.query(sql);
  return result;
}

/**
 * Get Sales Order Status List
 * @param {*} client - PG Client
 * @returns result - rows of sales status
 */
async function getSalesStatus(client) {
  const sql =
    'select sales_order_status_id from public.sales_order_status where (is_deleted = false)';
  const result = await client.query(sql);
  return result;
}

//
// Randomizers
//

/**
 * Random number between min,max inclusive
 * Generated by AI
 * @param {number} min
 * @param {number} max
 * @returns {number} - between inclusive
 */
function getRandomNumber(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 * Get random date between two dates
 * Generated by AI
 * @param {Date} startDate
 * @param {Date} endDate
 * @returns {Date} - Random Date
 */
function getRandomDate(startDate, endDate) {
  // Convert dates to timestamps
  const startTimestamp = startDate.getTime();
  const endTimestamp = endDate.getTime();

  // Calculate the range in milliseconds
  const range = endTimestamp - startTimestamp;

  // Generate a random offset within the range
  const randomOffset = Math.random() * range;

  // Add the offset to the start timestamp
  const randomTimestamp = startTimestamp + randomOffset;

  // Create a new Date object from the random timestamp
  return new Date(randomTimestamp);
}

/**
 * Given a PG Result, return a random rows, indexColumn value
 * @param {*} result - PG.RESULT
 * @param {number} indexColumn - Column to use (default 0)
 * @returns {*} - Value
 */
function getRandomResult(result, indexColumn = 0) {
  const max = result.rowCount;
  const index = getRandomNumber(0, max - 1);
  let value = result.rows[index][indexColumn];
  return value;
}

/**
 * Get Biased Incentive
 * @param {*} incentives  - PG.RESULT
 * @returns {number} - incentive_id (strong bias to 1 (none))
 */
function getBiasedIncentive(incentives) {
  const NONE = 1;
  const ODDS = 901;
  let incentive_id = NONE;
  if (getRandomNumber(1, 1000) > ODDS) {
    let incentive_id = getRandomResult(incentives, 0);
  }
  return incentive_id;
}

/**
 * Get Biased Incentive
 * @param {*} incentives  - PG.RESULT
 * @returns {number} - incentive_id (strong bias to 1 (none))
 */
function getBiasedOrderStatus(orderStatus) {
  const DRAFT = 1;
  const ODDS = 701;
  let order_status_id = DRAFT;
  if (getRandomNumber(1, 1000) > ODDS) {
    let order_status_id = getRandomResult(orderStatus, 0);
  }
  return order_status_id;
}

/**
 * Gets a random date for a year
 * @param {number} year
 * @returns {Date} - Random date for a year
 */
function getRandomDateForYear(year) {
  const beginDate = new Date(`${year}-1-1`);
  const endDate = new Date(`${year}-12-31`);
  const rDate = getRandomDate(beginDate, endDate);
  return rDate;
}

//
// Inserters
//

/**
 * Create Sales Order
 * @param {*} client - PG Client
 * @param {number} employee_id
 * @param {number} company_id
 * @param {number} incentive_id
 * @param {Date} sales_order_date
 * @param {number} sales_order_status_id
 * @param {number} region_id
 * @returns {number} - sales_order_id (PK)
 */
async function makeSalesOrder(
  client,
  employee_id,
  company_id,
  incentive_id,
  sales_order_date,
  sales_order_status_id,
  region_id
) {
  const query = {
    text:
      'INSERT INTO public.sales_orders(employee_id, company_id, incentive_id, sales_order_date, sales_order_status_id, region_id)' +
      ' VALUES ($1, $2, $3, $4, $5,$ 6);',
    values: [
      employee_id, // $1
      company_id, // $2
      incentive_id, // $3
      sales_order_date, // $4
      sales_order_status_id, // $5
      region_id // $6
    ]
  };
  const res = await client.query(query);
  const sales_order_id = res.rows[0][0];
  return sales_order_id;
}

/**
 * Create Sales Order Detail
 * @param {*} client - PG Client
 * @param {number} sales_order_id (FK)
 * @param {number} quantity
 * @param {number} products_id
 * @returns {number} - sales_order_detail_id (pk)
 */
async function makeSalesOrderDetails(
  client,
  sales_order_id,
  quantity,
  products_id
) {
  const query = {
    text:
      'INSERT INTO public.sales_orders_details( sales_order_id, quantity, products_id)' +
      ' VALUES ($1, $2, $3);',
    values: [sales_order_id, quantity, products_id]
  };
  const res = await client.query(query);
  const sales_order_detail_id = res.rows[0][0];
  return sales_order_detail_id;
}

// ---------------------------------------------

/**
 * Main() Async Entry Point
 */
async function main() {
  /**
   * Argument parsing
   */
  const yargs = require('yargs');

  // Command line args
  const commandlineargs = yargs
    .option('c', {
      alias: 'connection',
      describe: 'connection string',
      demandOption: false,
      default: DEFAULT_POSTGRES
    })
    .option('n', {
      alias: 'number',
      describe: 'How many sales to make',
      type: 'number',
      demandOption: false,
      default: 100
    })
    .option('y', {
      alias: 'year',
      describe: 'For what year',
      type: 'number',
      demandOption: false,
      default: 2024
    }).argv;

  // see: https://node-postgres.com/apis/client#new-client
  const postgres_config = {
    connectionString: commandlineargs.connection
  };

  let client = new Client(postgres_config);

  try {
    await client.connect();

    // Lookups
    console.log('Lookup Data');
    const products = await getProducts(client);
    const incentives = await getIncentives(client);
    const companies = await getCompanies(client);
    const sales = await getSalesPeople(client);
    const orderStatus = await getSalesStatus(client);

    const MAX_PRODUCTS_PER_ORDER = 31;
    const MAX_QUANTITY = 999.9;

    // Make data
    console.log(`Making ${commandlineargs.number} Sales Orders`);
    for (let i = 0; i < commandlineargs.number; i++) {
      const salesDate = getRandomDateForYear(commandlineargs.year);
      const incentive_id = getBiasedIncentive(incentives);
      const company_id = getRandomResult(companies, 1);
      const employee_id = getRandomResult(sales, 1);
      const sales_order_status_id = getBiasedOrderStatus(orderStatus);

      const sales_order_id = await makeSalesOrder(
        client,
        employee_id,
        company_id,
        incentive_id,
        salesDate,
        sales_order_status_id
      );
      console.log(
        `= Sales Order Id: ${sales_order_id}, Company: ${company_id}, By: ${employee_id}, on: ${salesDate}, Status: ${sales_order_status_id}`
      );

      const max_lines = getRandomNumber(1, MAX_PRODUCTS_PER_ORDER);
      for (let j = 0; j < max_lines; j++) {
        const product_id = getRandomDate(products, 1);
        const quantity = getRandomNumber(1, MAX_QUANTITY);

        const sales_order_detail_id = await makeSalesOrderDetails(
          client,
          sales_order_id,
          quantity,
          product_id
        );
        console.log(
          `   - Sales Order Detail Id: ${sales_order_detail_id}, [${quantity}] ${product_id}`
        );
      }
    } // next record
  } catch (e) {
    console.log(e);
  } finally {
    await client.end();
    client = null;
  }
}

/**
 * ENTRY POINT
 */
main();
shutdown(0, 'Normal Exit');
